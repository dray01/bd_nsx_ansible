---
# tasks file for bd_nsx_data
  - name: gather moid for ds
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      datastore_name: "{{ vcenter_datastore }}"
      validate_certs: False
    register: gather_moids_ds
    tags: moids
  - name: gather moid for cl
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      cluster_name: "{{ vcenter_edge_cluster }}"
      validate_certs: False
    register: gather_moids_cl
    tags: moids
  - name: gather moid for uplink vnic
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      portgroup_name: "{{ uplink_portgroup }}"
      validate_certs: False
    register: gather_moids_upl_pg
    tags: moids
  - name: gather moid for mgmt portgroup
    vcenter_gather_moids:
      hostname: "{{ vcenter }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pwd }}"
      datacenter_name: "{{ vcenter_dc }}"
      portgroup_name: "{{ uplink_portgroup }}"
      validate_certs: False
    register: gather_moids_pg
    tags: moids

  - name: create logical switches
    nsx_logical_switch:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      transportzone: "{{ transport_zone }}"
      name: "{{ item.key }}"
      controlplanemode: "{{ cp_mode }}"
      description: "{{ item.value.name }}"
    with_dict: "{{ dlr_networks }}"
    register: logical_switch
    tags: lswitch_create

  - name: ESG creation
    nsx_edge_router:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      name: "{{ esg_name }}"
      description: 'This ESG is created by nsxansible'
      appliance_size: "{{ esg_size }}"
      resourcepool_moid: "{{ gather_moids_cl.object_id }}"
      datastore_moid: "{{ gather_moids_ds.object_id }}"
      datacenter_moid: "{{ gather_moids_cl.datacenter_moid }}"
      interfaces:
        vnic0:
          ip: "{{ esg_networks.uplink.ip }}"
          prefix_len: "{{ esg_networks.uplink.prefix_len }}"
          portgroup_id: "{{ esg_networks.uplink.portgroup_id }}"
          name: "{{ esg_networks.uplink.name }}"
          iftype: "{{ esg_networks.uplink.iftype }}"
        vnic1:
          ip: "{{ esg_networks.transit_net.ip }}"
          prefix_len: "{{ esg_networks.transit_net.prefix_len }}"
          logical_switch: "{{ esg_networks.transit_net.logical_switch }}"
          name: "{{ esg_networks.transit_net.name }}"
          iftype: "{{ esg_networks.transit_net.iftype }}"
      default_gateway: "{{ gw_ip }}"
      remote_access: 'true'
      username: "{{ esg_admin_username }}"
      password: "{{ esg_admin_password }}"
      firewall: "{{ firewall_on_off }}"
      ha_enabled: "{{ ha_enable }}"
    register: create_esg
    tags: esg_create

  - name: DLR creation
    nsx_dlr:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      name: "{{ dlr_name }}"
      description: 'This DLR is created by nsxansible'
      resourcepool_moid: "{{ gather_moids_cl.object_id }}"
      datastore_moid: "{{ gather_moids_ds.object_id }}"
      datacenter_moid: "{{ gather_moids_cl.datacenter_moid }}"
      mgmt_portgroup_moid: "{{ gather_moids_pg.object_id }}"
      interfaces:
        - name: "{{ dlr_networks.app1.name }}"
          ip: "{{ dlr_networks.app1.ip }}"
          prefix_len: "{{ dlr_networks.app1.prefix_len }}"
          logical_switch: "{{ dlr_networks.app1.logical_switch }}"
          iftype: "{{ dlr_networks.app1.iftype }}"
        - name: "{{ dlr_networks.app2.name }}"
          ip: "{{ dlr_networks.app2.ip }}"
          prefix_len: "{{ dlr_networks.app2.prefix_len }}"
          logical_switch: "{{ dlr_networks.app2.logical_switch }}"
          iftype: "{{ dlr_networks.app2.iftype }}"
        - name: "{{ dlr_networks.db1.name }}"
          ip: "{{ dlr_networks.db1.ip }}"
          prefix_len: "{{ dlr_networks.db1.prefix_len }}"
          logical_switch: "{{ dlr_networks.db1.logical_switch }}"
          iftype: "{{ dlr_networks.db1.iftype }}"
        - name: "{{ dlr_networks.web1.name }}"
          ip: "{{ dlr_networks.web1.ip }}"
          prefix_len: "{{ dlr_networks.web1.prefix_len }}"
          logical_switch: "{{ dlr_networks.web1.logical_switch }}"
          iftype: "{{ dlr_networks.web1.iftype }}"
        - name: "{{ dlr_networks.web2.name }}"
          ip: "{{ dlr_networks.web2.ip }}"
          prefix_len: "{{ dlr_networks.web2.prefix_len }}"
          logical_switch: "{{ dlr_networks.web2.logical_switch }}"
          iftype: "{{ dlr_networks.web2.iftype }}"
        - name: "{{ dlr_networks.web3.name }}"
          ip: "{{ dlr_networks.web3.ip }}"
          prefix_len: "{{ dlr_networks.web3.prefix_len }}"
          logical_switch: "{{ dlr_networks.web3.logical_switch }}"
          iftype: "{{ dlr_networks.web3.iftype }}"
        - name: "{{ dlr_networks.transit_net.name }}"
          ip: "{{ dlr_networks.transit_net.ip }}"
          prefix_len: "{{ dlr_networks.transit_net.prefix_len }}"
          logical_switch: "{{ dlr_networks.transit_net.logical_switch }}"
          iftype: "{{ dlr_networks.transit_net.iftype }}"
#      remote_access: 'true'
      username: "{{ dlr_admin_username }}"
      password: "{{ dlr_admin_password }}"
      ha_enabled: "{{ dlr_ha }}"
    register: create_dlr
    tags: dlr_create

  # Setting the bellow fact is needed as the DLR OSPF module needs the DLR uplink vnic index in the OSPF Area Map
  - set_fact:
      dlr_uplink_index: "{{ item.index }}"
    when: item.name == dlr_networks.transit_net.name
    with_items: "{{ create_dlr.interfaces }}"
    tags: dlr_create

  - name: Configure OSPF ESG
    nsx_ospf:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      edge_name: "{{ esg_name }}"
      router_id: "{{ esg_router_id }}"
      default_originate: True
      areas:
        - { area_id: "{{ esg_nth_ospf_area }}" }
        - { area_id: "{{ esg_sth_ospf_area }}" }
      area_map:
        - { area_id: "{{ esg_nth_ospf_area }}", vnic: "{{ esg_nth_ospf_nic }}" }
        - { area_id: "{{ esg_sth_ospf_area }}", vnic: "{{ esg_sth_ospf_nic }}" }
    register: ospf_esg
    tags: ospf_esg

  - name: Configure OSPF DLR
    nsx_ospf:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: present
      edge_name: "{{ dlr_name }}"
      router_id: "{{ dlr_router_id }}"
      forwarding_address: "{{ dlr_for_addr }}"
      protocol_address: "{{ dlr_router_id }}"
      areas:
        - { area_id: "{{ dlr_nth_ospf_area }}" }
      area_map:
        - { area_id: "{{ dlr_nth_ospf_area }}", vnic: "{{ dlr_uplink_index }}" }
    register: ospf_dlr
    tags: ospf_dlr

  - name: Configure OSPF Redistribution DLR
    nsx_redistribution:
      ospf_state: present
      bgp_state: absent
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      edge_name: "{{ dlr_name }}"
      rules:
        - {learner: 'ospf', priority: 0, static: false, connected: true, bgp: false, ospf: false, action: 'permit'}
    register: redist
    tags: redist
